{"version":3,"sources":["types/SortType.ts","store/filter.ts","store/loading.ts","store/selectedTodo.ts","store/todos.ts","store/index.ts","components/Loader/Loader.tsx","components/api.ts","components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortedType","initialFilters","query","completingState","all","actions","type","payload","todo","todos","useAppSelector","useSelector","rootReducer","combineReducers","action","loading","filter","active","completed","selectedTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","get","url","fetch","then","res","json","TodoFilter","dispatch","useDispatch","state","onChange","event","value","setFilter","target","placeholder","window","console","log","style","pointerEvents","length","onClick","TodoList","queryState","title","includes","getRowClass","classNames","map","selectedTodoActions","id","TodoModal","useState","userOfTodo","setUserOfTodo","useEffect","userId","user","href","email","name","App","isLoading","loadingActions","todosFromServer","todosActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7bc0e31.chunk.js","sourcesContent":["export enum SortedType {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import {\n  ActiveFilterAction,\n  AllFilterAction,\n  CompletedFilterAction,\n  SetQueryFilterAction,\n  FilterAction,\n  FilterState,\n  ClearQueryFilterAction,\n} from '../types/Redux/Filter';\nimport { SortedType } from '../types/SortType';\n\nconst initialFilters: FilterState = {\n  query: '',\n  completingState: SortedType.all,\n};\n\nexport const filterReducer = (\n  filter: FilterState = initialFilters,\n  action: FilterAction,\n) => {\n  switch (action.type) {\n    case 'filter/all':\n      return {\n        ...filter,\n        completingState: SortedType.all,\n      };\n\n    case 'filter/active':\n      return {\n        ...filter,\n        completingState: SortedType.active,\n      };\n\n    case 'filter/completed':\n      return {\n        ...filter,\n        completingState: SortedType.completed,\n      };\n\n    case 'filter/setQuery':\n      return {\n        ...filter,\n        query: action.payload,\n      };\n\n    case 'filter/clearQuery':\n      return {\n        ...filter,\n        query: '',\n      };\n    default:\n      return filter;\n  }\n};\n\nexport const actions = {\n  allFilter: (): AllFilterAction => ({ type: 'filter/all' }),\n  activeFilter: (): ActiveFilterAction => ({ type: 'filter/active' }),\n  completedFilter: (): CompletedFilterAction => ({ type: 'filter/completed' }),\n  setQueryfilter: (payload: string): SetQueryFilterAction => (\n    { type: 'filter/setQuery', payload }\n  ),\n  clearQueryFilter: (): ClearQueryFilterAction => (\n    { type: 'filter/clearQuery' }\n  ),\n};\n","import { StartLoadingAction, FinishLoadingAction, LoadingAction }\n  from '../types/Redux/Loading';\n\nexport const loadingReducer = (loading = false, action: LoadingAction) => {\n  switch (action.type) {\n    case 'loading/start':\n      return true;\n\n    case 'loading/finish':\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport const actions = {\n  startLoading: ():StartLoadingAction => ({ type: 'loading/start' }),\n  finishLoading: ():FinishLoadingAction => ({ type: 'loading/finish' }),\n};\n","import { ClearSelectedTodoAction, SelectedTodoAction, SetSelectedTodoAction }\n  from '../types/Redux/SelectedTodo';\nimport { Todo } from '../types/Todo';\n\nexport const selectedTodoReducer = (\n  selectedTodo: Todo | null = null,\n  action: SelectedTodoAction,\n) => {\n  switch (action.type) {\n    case 'todo/set':\n      return action.payload;\n    case 'todo/clear':\n      return null;\n    default:\n      return selectedTodo;\n  }\n};\n\nexport const actions = {\n  setSelectedTodo: (todo: Todo):SetSelectedTodoAction => ({\n    type: 'todo/set',\n    payload: todo,\n  }),\n  clearSelectedTodo: (): ClearSelectedTodoAction => ({\n    type: 'todo/clear',\n  }),\n};\n","import { Todo } from '../types/Todo';\nimport { SetTodosAction, TodosAction } from '../types/Redux/Todos';\n\nexport const todosReducer = (\n  todos: Todo[] = [],\n  action: TodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/set':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport const actions = {\n  setTodos: (todos: Todo[]):SetTodosAction => ({\n    type: 'todos/set',\n    payload: todos,\n  }),\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { filterReducer } from './filter';\nimport { loadingReducer } from './loading';\nimport { selectedTodoReducer } from './selectedTodo';\nimport { todosReducer } from './todos';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  loading: loadingReducer,\n  filter: filterReducer,\n  selectedTodo: selectedTodoReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction get<T>(url: string): Promise<T> {\n  return fetch(BASE_URL + url)\n    .then(res => res.json());\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return get<Todo[]>('/todos');\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return get<User>(`/users/${userId}`);\n};\n","import { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../store';\nimport { actions } from '../../store/filter';\nimport { SortedType } from '../../types/SortType';\n\nexport const TodoFilter: FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const setFilter = (value: SortedType) => {\n    switch (value) {\n      case SortedType.active:\n        dispatch(actions.activeFilter());\n        break;\n      case SortedType.completed:\n        dispatch(actions.completedFilter());\n        break;\n      default:\n        dispatch(actions.allFilter());\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={event => {\n              setFilter(event.target.value as SortedType);\n            }}\n          >\n            <option value={SortedType.all}>All</option>\n            <option value={SortedType.active}>Active</option>\n            <option value={SortedType.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"filterByTitle\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            window.console.log(event.target.value);\n            dispatch(actions.setQueryfilter(event.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable jsx-a11y/control-has-associated-label */}\n          {query.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"delete has-text\"\n              onClick={() => dispatch(actions.clearQueryFilter())}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../store';\nimport { actions as selectedTodoActions } from '../../store/selectedTodo';\nimport { SortedType } from '../../types/SortType';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: FC = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => {\n    const { query, completingState } = state.filter;\n\n    return state.todos.filter(todo => {\n      const queryState = todo.title.includes(query);\n\n      switch (completingState) {\n        case SortedType.active:\n          return !todo.completed && queryState;\n        case SortedType.completed:\n          return todo.completed && queryState;\n        default:\n          return queryState;\n      }\n    });\n  });\n\n  const getRowClass = (todo: Todo) => (\n    classNames(\n      { 'has-background-danger-light has-text-danger': !todo.completed },\n      { 'has-background-success-light has-text-success': todo.completed },\n    )\n  );\n\n  return (\n    <table\n      data-cy=\"listOfTodos\"\n      className=\"table is-narrow is-fullwidth\"\n    >\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            className={getRowClass(todo)}\n          >\n            <td className=\"is-vcentered\">\n              <span className=\"icon is-size-5\">\n                <i className={classNames(\n                  'fas',\n                  { 'fa-square-xmark': !todo.completed },\n                  { 'fa-check-square': todo.completed },\n                )}\n                />\n              </span>\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              {todo.title}\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                className=\"button is-warning\"\n                type=\"button\"\n                onClick={() => (\n                  dispatch(selectedTodoActions.setSelectedTodo(todo))\n                )}\n              >\n                {`Show #${todo.id}`}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../api';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../store';\nimport { actions as selectedTodoActions } from '../../store/selectedTodo';\n\nexport const TodoModal: FC = () => {\n  const dispatch = useDispatch();\n  const todo = useAppSelector(state => state.selectedTodo);\n  const [userOfTodo, setUserOfTodo] = useState<User>();\n\n  useEffect(() => {\n    if (!todo) {\n      return;\n    }\n\n    getUser(todo.userId).then((user) => {\n      setUserOfTodo(user);\n    });\n  }, []);\n\n  return (\n    <>\n      {todo && (\n        <div className=\"modal is-active\">\n          <div className=\"modal-background\" />\n\n          {!userOfTodo\n            ? <Loader />\n            : (\n              <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                  <div className=\"modal-card-title has-text-weight-medium\">\n                    {`Todo #${todo.id}`}\n                  </div>\n                  <a\n                    href=\"#close\"\n                    className=\"delete\"\n                    onClick={() => (\n                      dispatch(selectedTodoActions.clearSelectedTodo())\n                    )}\n                  >\n                    Close\n                  </a>\n                </header>\n\n                <div className=\"modal-card-body\">\n                  <p className=\"block\">\n                    {todo.title}\n                  </p>\n\n                  <p className=\"block\">\n                    {todo.completed\n                      ? <strong className=\"has-text-success\">Done</strong>\n                      : <strong className=\"has-text-danger\">Planned</strong>}\n                    {' by '}\n                    <a href={`mailto:${userOfTodo.email}`}>\n                      {userOfTodo.name}\n                    </a>\n                  </p>\n                </div>\n              </div>\n            )}\n        </div>\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './App.scss';\n\nimport { useAppSelector } from './store';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './components/api';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { actions as loadingActions } from './store/loading';\nimport { actions as todosActions } from './store/todos';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useAppSelector(state => state.loading);\n  const selectedTodo = useAppSelector(state => state.selectedTodo);\n\n  useEffect(() => {\n    dispatch(loadingActions.startLoading());\n\n    getTodos()\n      .then(todosFromServer => dispatch(todosActions.setTodos(todosFromServer)))\n      .finally(() => dispatch(loadingActions.finishLoading()));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1>Redux list of todos</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { store } from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}